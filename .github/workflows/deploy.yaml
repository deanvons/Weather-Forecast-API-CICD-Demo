name: Build and Deploy ASP.NET API to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

env:
  IMAGE_NAME: wfapi               # <- change if you want a different repo name in ACR
  PORT: 8080                      # Kestrel default inside container

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Optional but recommended NuGet cache
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal

      # Log in to Azure (OIDC)
      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Log in to ACR for docker push
      - name: Docker login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and tag Docker image
        run: |
          GIT_SHA=${GITHUB_SHA::7}
          docker build \
            --build-arg ASPNETCORE_URLS=http://+:${{ env.PORT }} \
            -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${GIT_SHA} \
            -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest \
            .

      - name: Push Docker image
        run: |
          GIT_SHA=${GITHUB_SHA::7}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${GIT_SHA}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Configure Web App to use ACR image
        run: |
          GIT_SHA=${GITHUB_SHA::7}
          # Point the Web App at the newly pushed image
          az webapp config container set \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --name ${{ secrets.WEBAPP_NAME }} \
            --docker-custom-image-name ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${GIT_SHA} \
            --docker-registry-server-url https://${{ secrets.ACR_LOGIN_SERVER }} \
            --docker-registry-server-user ${{ secrets.ACR_USERNAME }} \
            --docker-registry-server-password ${{ secrets.ACR_PASSWORD }}

          # Ensure the app listens on the container port (Kestrel default 8080)
          az webapp config appsettings set \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --name ${{ secrets.WEBAPP_NAME }} \
            --settings WEBSITES_PORT=${{ env.PORT }}

          az webapp restart \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --name ${{ secrets.WEBAPP_NAME }}
